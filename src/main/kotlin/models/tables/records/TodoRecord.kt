/*
 * This file is generated by jOOQ.
 */
package models.tables.records


import models.tables.Todo

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TodoRecord() : UpdatableRecordImpl<TodoRecord>(Todo.TODO), Record2<Long?, Array<String?>?> {

    open var user: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var content: Array<String?>?
        set(value): Unit = set(1, value)
        get(): Array<String?>? = get(1) as Array<String?>?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Long?, Array<String?>?> = super.fieldsRow() as Row2<Long?, Array<String?>?>
    override fun valuesRow(): Row2<Long?, Array<String?>?> = super.valuesRow() as Row2<Long?, Array<String?>?>
    override fun field1(): Field<Long?> = Todo.TODO.USER
    override fun field2(): Field<Array<String?>?> = Todo.TODO.CONTENT
    override fun component1(): Long? = user
    override fun component2(): Array<String?>? = content
    override fun value1(): Long? = user
    override fun value2(): Array<String?>? = content

    override fun value1(value: Long?): TodoRecord {
        this.user = value
        return this
    }

    override fun value2(value: Array<String?>?): TodoRecord {
        this.content = value
        return this
    }

    override fun values(value1: Long?, value2: Array<String?>?): TodoRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised TodoRecord
     */
    constructor(user: Long? = null, content: Array<String?>? = null): this() {
        this.user = user
        this.content = content
    }
}
